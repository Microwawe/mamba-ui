/* eslint-disable node/no-unpublished-require */
/* eslint-disable node/no-missing-require */
const colors = require('tailwindcss/colors');

module.exports = {
	purge: [],
	theme: {
		container: {
			center: true,
		},
		colors: {
			transparent: 'transparent',
			current: 'currentColor',
			black: colors.black,
			white: colors.white,
			rose: colors.rose,
			pink: colors.pink,
			fuchsia: colors.fuchsia,
			purple: colors.purple,
			violet: colors.violet,
			indigo: colors.indigo,
			blue: colors.blue,
			lightBlue: colors.lightBlue,
			cyan: colors.cyan,
			teal: colors.teal,
			emerald: colors.emerald,
			green: colors.green,
			lime: colors.lime,
			yellow: colors.yellow,
			amber: colors.amber,
			orange: colors.orange,
			red: colors.red,
			warmGray: colors.warmGray,
			trueGray: colors.trueGray,
			gray: colors.gray,
			blueGray: colors.blueGray,
			coolGray: colors.coolGray,
		},
		extend: {
			flex: {
				'2': '2 2 0%',
				'3': '3 3 0%',
			},
			height: {
				'112': '28rem',
				'128': '32rem',
			},
			minHeight: {
				'48': '12rem',
				'96': '24rem',
			},
			maxHeight: {
				'half-screen': '50vh',
			},
			typography: theme => ({
				DEFAULT: {
					css: {
						color: theme('colors.gray.700'),
						h2: {
							color: theme('colors.gray.800'),
						},
						h3: {
							color: theme('colors.gray.800'),
						},
						strong: {
							color: theme('colors.gray.800'),
						},
						a: {
							color: theme('colors.violet.500'),
							'&:hover': {
								color: theme('colors.violet.600'),
							},
						},
					},
				},
				dark: {
					css: {
						color: theme('colors.gray.400'),
						a: {color: theme('colors.gray.100')},
						strong: {color: theme('colors.gray.100')},
						h1: {color: theme('colors.gray.100')},
						h2: {color: theme('colors.gray.100')},
						h3: {color: theme('colors.gray.100')},
						h4: {color: theme('colors.gray.100')},
						code: {color: theme('colors.gray.100')},
						pre: {
							color: theme('colors.gray.200'),
							backgroundColor: theme('colors.gray.800'),
						},
					},
				},
			}),
		},
	},
	variants: {
		accessibility: ['responsive', 'focus-within', 'focus'],
		alignContent: [],
		alignItems: ['responsive'],
		alignSelf: ['responsive'],
		animation: [],
		appearance: [],
		backgroundAttachment: [],
		backgroundClip: [],
		backgroundColor: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
		backgroundImage: [],
		backgroundOpacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
		backgroundPosition: [],
		backgroundRepeat: [],
		backgroundSize: ['responsive'],
		borderCollapse: [],
		borderColor: ['group-hover', 'focus-within', 'hover', 'focus'],
		borderOpacity: ['group-hover', 'focus-within', 'hover', 'focus'],
		borderRadius: ['responsive'],
		borderStyle: [],
		borderWidth: ['responsive'],
		boxShadow: ['group-hover', 'focus-within', 'hover', 'focus'],
		boxSizing: [],
		clear: [],
		cursor: [],
		display: ['responsive'],
		divideColor: ['responsive'],
		divideOpacity: [],
		divideStyle: [],
		divideWidth: ['responsive'],
		fill: [],
		flex: ['responsive'],
		flexDirection: ['responsive'],
		flexGrow: ['responsive'],
		flexShrink: ['responsive'],
		flexWrap: ['responsive'],
		float: [],
		fontFamily: [],
		fontSize: ['responsive'],
		fontSmoothing: [],
		fontStyle: ['responsive'],
		fontVariantNumeric: [],
		fontWeight: ['responsive'],
		gap: ['responsive'],
		gradientColorStops: ['responsive', 'hover', 'focus'],
		gridAutoColumns: ['responsive'],
		gridAutoFlow: ['responsive'],
		gridAutoRows: ['responsive'],
		gridColumn: ['responsive'],
		gridColumnEnd: ['responsive'],
		gridColumnStart: ['responsive'],
		gridRow: ['responsive'],
		gridRowEnd: ['responsive'],
		gridRowStart: ['responsive'],
		gridTemplateColumns: ['responsive'],
		gridTemplateRows: ['responsive'],
		height: ['responsive'],
		inset: ['responsive'],
		justifyContent: ['responsive'],
		justifyItems: ['responsive'],
		justifySelf: ['responsive'],
		letterSpacing: ['responsive'],
		lineHeight: ['responsive'],
		listStylePosition: ['responsive'],
		listStyleType: ['responsive'],
		margin: ['responsive'],
		maxHeight: ['responsive'],
		maxWidth: ['responsive'],
		minHeight: ['responsive'],
		minWidth: ['responsive'],
		objectFit: ['responsive'],
		objectPosition: ['responsive'],
		opacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
		order: ['responsive'],
		outline: ['responsive', 'focus-within', 'focus'],
		overflow: ['responsive'],
		overscrollBehavior: [],
		padding: ['responsive'],
		placeContent: ['responsive'],
		placeItems: ['responsive'],
		placeSelf: ['responsive'],
		placeholderColor: ['responsive', 'focus'],
		placeholderOpacity: ['responsive', 'focus'],
		pointerEvents: ['responsive'],
		position: ['responsive'],
		resize: ['responsive'],
		ringColor: ['focus-within', 'hover', 'focus'],
		ringOffsetColor: ['focus-within', 'hover', 'focus'],
		ringOffsetWidth: ['focus-within', 'hover', 'focus'],
		ringOpacity: ['focus-within', 'hover', 'focus'],
		ringWidth: ['focus-within', 'hover', 'focus'],
		rotate: ['hover', 'focus'],
		scale: ['hover', 'focus'],
		skew: ['hover', 'focus'],
		space: ['responsive'],
		stroke: [],
		strokeWidth: [],
		tableLayout: [],
		textAlign: ['responsive'],
		textColor: ['group-hover', 'focus-within', 'hover', 'focus'],
		textDecoration: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
		textOpacity: [],
		textOverflow: [],
		textTransform: [],
		transform: [],
		transformOrigin: [],
		transitionDelay: [],
		transitionDuration: [],
		transitionProperty: [],
		transitionTimingFunction: [],
		translate: ['responsive'],
		typography: [],
		userSelect: ['responsive'],
		verticalAlign: ['responsive'],
		visibility: ['responsive'],
		whitespace: ['responsive'],
		width: ['responsive'],
		wordBreak: ['responsive'],
		zIndex: [],
	},
	corePlugins: {
		container: false,
	},
	plugins: [
		require('@tailwindcss/typography'),
		require('@tailwindcss/forms'),
		({addComponents, theme}) => {
			const container = {
				'.container': {
					margin: 'auto',
					maxWidth: theme('maxWidth.full'),
					'@screen sm': {
						maxWidth: theme('maxWidth.2xl'),
					},
					'@screen md': {
						maxWidth: theme('maxWidth.3xl'),
					},
					'@screen lg': {
						maxWidth: theme('maxWidth.5xl'),
					},
					'@screen xl': {
						maxWidth: theme('maxWidth.6xl'),
					},
					'@screen 2xl': {
						maxWidth: theme('maxWidth.7xl'),
					},
				},
			};
			addComponents(container);
		},
	],
};
